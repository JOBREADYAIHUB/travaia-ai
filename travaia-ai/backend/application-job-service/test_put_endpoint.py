#!/usr/bin/env python3
"""
Test script for PUT /api/applications/{application_id} endpoint
"""

import sys
import os
import asyncio
from datetime import datetime
from typing import Dict, Any

# Add the current directory to Python path for imports
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from models import ApiResponse, Application, ApplicationUpdateRequest, ContactAddRequest, NoteAddRequest
    from services.application_service import ApplicationService
    print("‚úÖ Successfully imported models and services")
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    sys.exit(1)

def test_imports():
    """Test that all required imports work"""
    try:
        from fastapi import FastAPI, HTTPException, Depends, Request
        from slowapi import Limiter
        print("‚úÖ FastAPI and SlowAPI imports successful")
        
        from shared.auth_middleware import get_current_user
        print("‚úÖ Auth middleware import successful")
        
        return True
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        return False

def test_update_request_model():
    """Test ApplicationUpdateRequest Pydantic model"""
    try:
        # Test partial update with only some fields
        partial_update = ApplicationUpdateRequest(
            job_title="Senior Software Engineer",
            status="interviewing"
        )
        print(f"‚úÖ Partial update model works: {partial_update.job_title}")
        
        # Test with contacts and notes
        full_update = ApplicationUpdateRequest(
            job_title="Lead Developer",
            company_name="Tech Corp Updated",
            status="offered",
            contacts=[
                ContactAddRequest(name="John Doe", role="HR Manager", email="john@techcorp.com"),
                ContactAddRequest(name="Jane Smith", role="Engineering Manager")
            ],
            notes=[
                NoteAddRequest(content="Great interview experience"),
                NoteAddRequest(content="Salary negotiation pending")
            ]
        )
        print(f"‚úÖ Full update model works: {len(full_update.contacts)} contacts, {len(full_update.notes)} notes")
        
        # Test model_dump with exclude_none
        update_dict = partial_update.model_dump(exclude_none=True)
        expected_keys = {"job_title", "status"}
        if set(update_dict.keys()) == expected_keys:
            print("‚úÖ model_dump(exclude_none=True) works correctly")
        else:
            print(f"‚ùå Expected keys {expected_keys}, got {set(update_dict.keys())}")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå Update request model error: {e}")
        return False

async def test_service_update_method():
    """Test the update_application service method"""
    try:
        service = ApplicationService()
        print("‚úÖ ApplicationService instantiated successfully")
        
        # Test with non-existent application (should return None)
        update_data = {"job_title": "Updated Title", "status": "interviewing"}
        result = await service.update_application(
            user_id="test_user_123",
            application_id="non_existent_id",
            update_data=update_data
        )
        
        if result is None:
            print("‚úÖ Service method correctly returns None for non-existent application")
        else:
            print(f"‚ö†Ô∏è  Service method returned: {result}")
        
        return True
    except Exception as e:
        print(f"‚ùå Service method error: {e}")
        return False

def test_endpoint_registration():
    """Test that the PUT endpoint is properly registered"""
    try:
        from main import app
        
        # Check if the route exists
        routes = [route.path for route in app.routes]
        expected_route = "/api/applications/{application_id}"
        
        # Check for PUT method specifically
        put_route_found = False
        for route in app.routes:
            if hasattr(route, 'path') and route.path == expected_route:
                if hasattr(route, 'methods') and 'PUT' in route.methods:
                    put_route_found = True
                    print(f"‚úÖ PUT {expected_route} endpoint is registered")
                    if hasattr(route, 'endpoint'):
                        print(f"   Endpoint function: {route.endpoint.__name__}")
                    break
        
        if not put_route_found:
            print(f"‚ùå PUT endpoint not found. Available routes: {routes}")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå Endpoint registration error: {e}")
        return False

def test_method_signature():
    """Test the service method signature"""
    try:
        import inspect
        from services.application_service import ApplicationService
        
        service = ApplicationService()
        method = getattr(service, 'update_application')
        
        # Check method signature
        sig = inspect.signature(method)
        params = list(sig.parameters.keys())
        
        expected_params = ['user_id', 'application_id', 'update_data']
        if all(param in params for param in expected_params):
            print("‚úÖ Service method has correct signature")
            print(f"   Parameters: {params}")
        else:
            print(f"‚ùå Incorrect method signature. Expected {expected_params}, got {params}")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå Method signature error: {e}")
        return False

def test_timestamp_handling():
    """Test timestamp handling in update data"""
    try:
        # Test datetime object
        now = datetime.utcnow()
        update_data = ApplicationUpdateRequest(
            job_title="Test Job",
            application_date=now
        )
        
        update_dict = update_data.model_dump(exclude_none=True)
        if 'application_date' in update_dict and isinstance(update_dict['application_date'], datetime):
            print("‚úÖ Datetime objects handled correctly in update model")
        else:
            print(f"‚ùå Datetime handling issue: {type(update_dict.get('application_date'))}")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå Timestamp handling error: {e}")
        return False

def test_validation_rules():
    """Test validation rules for update request"""
    try:
        # Test valid data
        valid_update = ApplicationUpdateRequest(
            job_title="Valid Job Title",
            company_name="Valid Company"
        )
        print("‚úÖ Valid update data accepted")
        
        # Test empty string validation (should fail for required fields when provided)
        try:
            invalid_update = ApplicationUpdateRequest(job_title="")
            print("‚ùå Empty job_title should have failed validation")
            return False
        except Exception:
            print("‚úÖ Empty job_title correctly rejected")
        
        # Test max length validation
        try:
            long_title = "x" * 201  # Exceeds max_length=200
            invalid_update = ApplicationUpdateRequest(job_title=long_title)
            print("‚ùå Long job_title should have failed validation")
            return False
        except Exception:
            print("‚úÖ Long job_title correctly rejected")
        
        return True
    except Exception as e:
        print(f"‚ùå Validation rules error: {e}")
        return False

async def main():
    """Run all tests"""
    print("üß™ Testing PUT /api/applications/{application_id} endpoint implementation")
    print("=" * 80)
    
    tests = [
        ("Import Tests", test_imports),
        ("Update Request Model", test_update_request_model),
        ("Method Signature", test_method_signature),
        ("Endpoint Registration", test_endpoint_registration),
        ("Timestamp Handling", test_timestamp_handling),
        ("Validation Rules", test_validation_rules),
        ("Service Update Method", test_service_update_method),
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüîç Running {test_name}...")
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå {test_name} failed with exception: {e}")
            results.append((test_name, False))
    
    # Summary
    print("\n" + "=" * 80)
    print("üìã TEST SUMMARY")
    print("=" * 80)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} - {test_name}")
        if result:
            passed += 1
    
    print(f"\nüìä Results: {passed}/{len(results)} tests passed")
    
    if passed == len(results):
        print("\nüéâ All tests passed! The PUT /api/applications/{application_id} endpoint is ready!")
        print("\nüìù Endpoint Features:")
        print("   ‚úÖ Partial updates (only provided fields are updated)")
        print("   ‚úÖ JWT authentication and user ownership validation")
        print("   ‚úÖ Proper timestamp handling for dates")
        print("   ‚úÖ Contacts and notes array updates")
        print("   ‚úÖ Rate limiting (30 requests/minute)")
        print("   ‚úÖ Comprehensive error handling (404, 500)")
        print("   ‚úÖ Structured logging for monitoring")
        print("\nüìù Usage Example:")
        print("   PUT /api/applications/{application_id}")
        print("   Authorization: Bearer <JWT_TOKEN>")
        print("   Content-Type: application/json")
        print("   {")
        print('     "job_title": "Senior Software Engineer",')
        print('     "status": "interviewing",')
        print('     "contacts": [{"name": "John Doe", "role": "HR Manager"}]')
        print("   }")
    else:
        print(f"\n‚ö†Ô∏è  {len(results) - passed} test(s) failed. Please review the implementation.")
    
    return passed == len(results)

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
